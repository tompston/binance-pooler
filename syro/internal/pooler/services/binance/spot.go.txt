func (s *service) ScrapeTickers() error {
	var tickers []market_model.CryptoSpotAssetDocument

	coll := s.app.Db().CryptoSpotAssetColl()
	opt := options.Find().SetSort(bson.M{"market_cap": -1})
	if err := mongodb.GetAllDocumentsWithTypes(coll, nil, opt, &tickers); err != nil {
		return fmt.Errorf("error getting tickers: %v", err)
	}

	if len(tickers) == 0 {
		return fmt.Errorf("no tickers found")
	}

	// Number of concurrent goroutines
	const numWorkers = 5

	// Create a channel for sending tickers to workers
	tickerChan := make(chan market_model.CryptoSpotAssetDocument, len(tickers))

	// Start worker goroutines
	var wg sync.WaitGroup
	for i := 0; i < numWorkers; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for ticker := range tickerChan {
				if err := s.scrapeHistoricalData(ticker); err != nil {
					s.log().Error(err)
					continue
				}
			}
		}()
	}

	// Send tickers to the channel
	for _, ticker := range tickers {
		tickerChan <- ticker
	}
	close(tickerChan) // Close the channel after sending all tickers

	// Wait for all workers to finish
	wg.Wait()

	return nil
}

func (s *service) scrapeHistoricalData(info market_model.CryptoSpotAssetDocument) error {
	var (
		defaultStartTime   = time.Now().UTC().Add(-4 * 365 * 24 * time.Hour)
		coinsColl          = s.app.Db().CryptoSpotAssetColl()
		CryptoSpotOhlcColl = s.app.Db().CryptoSpotOhlcColl()
	)

	id := info.ID

	if id == "" {
		return fmt.Errorf("tickerID is empty")
	}

	// If the field has not been set before, set it to defaultStartTime
	defaultStartTime, err := market_model.SelectOrUpdateDefaultStartTime(
		&info.Asset,
		id,
		defaultStartTime,
		info.AvailableSince,
		coinsColl)
	if err != nil {
		return err
	}

	t1, err := market_model.GetLatestOhlcStartTime(id, defaultStartTime, CryptoSpotOhlcColl, s.log().Debug)
	if err != nil {
		return fmt.Errorf("error getting latest start time: %v", err)
	}

	// Add _MAX_REQ_PERIOD_IN_MIN minutes to t1
	t2 := t1.Add(_MAX_REQ_PERIOD_IN_MIN * time.Minute)

	api := NewAPI(_MAX_REQ_PERIOD_IN_MIN)

	doc, err := api.GetSpotKline(id, t1, t2, TIMEFRAME_1M)
	if err != nil {
		return fmt.Errorf("error scraping ohlc data for %v: %v", id, err)
	}

	if len(doc) == 0 {
		// increment on the next fetch start time if no data found for ticker
		const availableSinceIncrement = 7 * 24 * time.Hour
		nextStartTime := t2.Add(availableSinceIncrement)
		s.log().Trace(fmt.Sprintf("no data found for %v from %v -> %v, setting the available_since to %v", id, t1, t2, nextStartTime.Format("2006-01-02")))

		return market_model.UpdateAvailableSinceForAsset(s.app.Db().CryptoSpotAssetColl(), id, nextStartTime.UTC())
	}

	if doc := market_model.UpsertOhlcRows(doc, CryptoSpotOhlcColl); doc != nil {
		s.log().Info(doc.String() + " for " + id)
	}

	return nil
}